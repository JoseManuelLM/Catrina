/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.itson.catrina.ui;

import java.awt.Component;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import mx.itson.catrina.entidades.Account;
import mx.itson.catrina.entidades.Transaction;
import mx.itson.catrina.negocio.Operation;

/**
 * Contiene los métodos que brindan funcionamiento a la interfaz gráfica.
 * @author José Manuel Leyva Munguía
 * @version v1.0
 */
public class Main extends javax.swing.JFrame {

    Account account;
    Operation operation = new Operation();
    String month;
    
    public Main() {
        
        initComponents();
        
        // Asigna un renderizador personalizado a la primera columna de la tabla tblCustomerInfo.
        tblCustomerInfo.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            
            // Sobrescribe el método de la clase DefaultTableCellRenderer para personalizar el renderizado.
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                
                // Llama al método original de la clase padre para obtener el componente de la celda.
                Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                // Verifica si la columna es la primera (columna == 0).
                if (column == 0) {
                    // Si es la primera columna, establece el tipo de fuente del texto como negrita.
                    cellComponent.setFont(cellComponent.getFont().deriveFont(Font.BOLD));
                }
                // Retorna el componente de la celda modificado.
                return cellComponent;
            }
        });
        
        // Se repiten las mismas instrucciones para las tablas tblAccount y tblPeriodSummary
        tblAccount.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (column == 0) {
                    cellComponent.setFont(cellComponent.getFont().deriveFont(Font.BOLD));
                }

                return cellComponent;
            }
        });
    
        tblPeriodSummary.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (column == 0) {
                    cellComponent.setFont(cellComponent.getFont().deriveFont(Font.BOLD));
                }

                return cellComponent;
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txfFile = new javax.swing.JTextField();
        cbxMonth = new javax.swing.JComboBox<>();
        btnSeleccione = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        txfCustomerName = new javax.swing.JTextField();
        txtCustomerId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomerInfo = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAccount = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPeriodSummary = new javax.swing.JTable();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTransactions = new javax.swing.JTable();
        jTextField4 = new javax.swing.JTextField();
        txfFinalBalance = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Estado de cuenta");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("IconoCitibanamex.png")));
        setResizable(false);

        jLabel1.setText("Seleccione el mes:");

        jLabel2.setText("Seleccione el archivo a cargar:");

        txfFile.setEditable(false);
        txfFile.setBackground(new java.awt.Color(204, 204, 204));

        cbxMonth.setBackground(new java.awt.Color(204, 204, 204));
        cbxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        cbxMonth.setToolTipText("Seleccionar mes");
        cbxMonth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbxMonth.setEnabled(false);
        cbxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMonthItemStateChanged(evt);
            }
        });

        btnSeleccione.setBackground(new java.awt.Color(153, 153, 153));
        btnSeleccione.setText("Seleccione...");
        btnSeleccione.setToolTipText("Seleccionar archivo JSON");
        btnSeleccione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccioneActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 204, 0));
        jTextField2.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 24)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("ESTADO DE CUENTA");
        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txfCustomerName.setEditable(false);
        txfCustomerName.setBackground(new java.awt.Color(255, 204, 0));
        txfCustomerName.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        txfCustomerName.setText("NOMBRE DEL CLIENTE");
        txfCustomerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txtCustomerId.setEditable(false);
        txtCustomerId.setBackground(new java.awt.Color(255, 204, 0));
        txtCustomerId.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        txtCustomerId.setText("ID DEL CLIENTE");
        txtCustomerId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        tblCustomerInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomerInfo.setShowGrid(true);
        jScrollPane1.setViewportView(tblCustomerInfo);
        if (tblCustomerInfo.getColumnModel().getColumnCount() > 0) {
            tblCustomerInfo.getColumnModel().getColumn(0).setResizable(false);
        }

        tblAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAccount.setShowGrid(true);
        jScrollPane2.setViewportView(tblAccount);
        if (tblAccount.getColumnModel().getColumnCount() > 0) {
            tblAccount.getColumnModel().getColumn(0).setResizable(false);
            tblAccount.getColumnModel().getColumn(1).setResizable(false);
        }

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255, 204, 0));
        jTextField1.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        jTextField1.setText("RESUMEN DEL PERIODO");
        jTextField1.setToolTipText("");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        tblPeriodSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", ""
            }
        ));
        tblPeriodSummary.setName(""); // NOI18N
        tblPeriodSummary.setShowGrid(true);
        jScrollPane3.setViewportView(tblPeriodSummary);
        if (tblPeriodSummary.getColumnModel().getColumnCount() > 0) {
            tblPeriodSummary.getColumnModel().getColumn(0).setResizable(false);
            tblPeriodSummary.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblPeriodSummary.getColumnModel().getColumn(1).setResizable(false);
        }

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(255, 204, 0));
        jTextField3.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        jTextField3.setText("DETALLE DE MOVIMIENTOS REALIZADOS");
        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        tblTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "DESCRIPCIÓN", "DEPÓSITO", "RETIRO", "SUBTOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransactions.setShowGrid(true);
        jScrollPane4.setViewportView(tblTransactions);
        if (tblTransactions.getColumnModel().getColumnCount() > 0) {
            tblTransactions.getColumnModel().getColumn(0).setResizable(false);
            tblTransactions.getColumnModel().getColumn(0).setPreferredWidth(35);
            tblTransactions.getColumnModel().getColumn(1).setResizable(false);
            tblTransactions.getColumnModel().getColumn(1).setPreferredWidth(300);
            tblTransactions.getColumnModel().getColumn(2).setResizable(false);
            tblTransactions.getColumnModel().getColumn(4).setResizable(false);
        }

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(255, 204, 0));
        jTextField4.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 15)); // NOI18N
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.setText("SALDO FINAL DEL PERIODO:");
        jTextField4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txfFinalBalance.setEditable(false);
        txfFinalBalance.setBackground(new java.awt.Color(255, 204, 0));
        txfFinalBalance.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 15)); // NOI18N
        txfFinalBalance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("$");

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mx/itson/catrina/ui/Citibanamex-logo (1).png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 375, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomerId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfFinalBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxMonth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(154, 154, 154)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(132, 132, 132))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txfFile, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSeleccione)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(283, 283, 283))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeleccione))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfFinalBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnSeleccioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccioneActionPerformed
        
        try{
            // Crea un cuadro de diálogo para elegir un archivo
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            
            // Instrucciones para en caso de que el usuario elija un archivo
            if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                
                cbxMonth.setEnabled(true);
                
                // Se obtiene el archivo, se leer el contenido del archivo como un arreglo de bytes y se convierte a una cadena
                File file = fileChooser.getSelectedFile();
                byte BytesFile[] = Files.readAllBytes(file.toPath());
                String content = new String(BytesFile, StandardCharsets.UTF_8);
                
                // Limpiar y preparar las tablas para mostrar nueva información
                DefaultTableModel modelTblCustomerInfo = (DefaultTableModel) tblCustomerInfo.getModel();
                modelTblCustomerInfo.setRowCount(0);
                    
                DefaultTableModel modelTblAccount = (DefaultTableModel) tblAccount.getModel();
                modelTblAccount.setRowCount(0);
                    
                DefaultTableModel modelTblPeriodSummary = (DefaultTableModel) tblPeriodSummary.getModel();
                modelTblPeriodSummary.setRowCount(0);
                    
                DefaultTableModel modelTblTransactions = (DefaultTableModel) tblTransactions.getModel();
                modelTblTransactions.setRowCount(0);
                
                // Variables para almacenar depósitos, retiros y saldo final
                float deposits = 0;
                float withdrawals = 0;
                float finalBalance = 0;
                
                // Deserializa el contenido del archivo al objeto account
                account = new Account().deserialize(content);
                // Guarda el mes en la variable month
                month = cbxMonth.getSelectedItem().toString();
                
                // Obtiene la lista de transacciones para el mes seleccionado
                List<Transaction> txn = operation.getTransactions(month, account.getTransactions());
                // Obtiene el saldo inicial para el mes seleccionado
                float previousBalance = operation.getInitialBalance(month, account.getTransactions());
                
                // Actualizar la interfaz gráfica con información relevante
                txfFile.setText(file.toString());
                
                txfCustomerName.setText(account.getCustomer().getName());
                modelTblCustomerInfo.addRow(new Object[] {"RFC: " + account.getCustomer().getRfc()});
                modelTblCustomerInfo.addRow(new Object[] {"DIRECCION: " + account.getCustomer().getAddress()});
                modelTblCustomerInfo.addRow(new Object[] {"CIUDAD: " + account.getCustomer().getCity()});
                modelTblCustomerInfo.addRow(new Object[] {"C.P: " + account.getCustomer().getZipCode()});
                txtCustomerId.setText("ID: " + account.getCustomer().getId());
                 
                modelTblAccount.addRow(new Object[] {"CUENTA", String.format("%25s", account.getAccount())});
                modelTblAccount.addRow(new Object[] {"CLABE", String.format("%16s", account.getClabe())});
                modelTblAccount.addRow(new Object[] {"MONEDA", String.format("%32s", account.getCurrency())});
                 
                // Calcula depósitos, retiros y saldo final
                for(Transaction t : txn){
                
                     deposits += t.getDeposit();
                     withdrawals += t.getWithdrawal();
                     finalBalance = t.getSubtotal();
                
                }
                 // Actualiza la tabla de resumen del período
                modelTblPeriodSummary.addRow(new Object[] {"Saldo inicial (anterior)", String.format("$%,34.2f", previousBalance)});
                modelTblPeriodSummary.addRow(new Object[] {"Depósitos", String.format("$%,34.2f", deposits)});
                modelTblPeriodSummary.addRow(new Object[] {"Retiros", String.format("$%,34.2f", withdrawals)});
                modelTblPeriodSummary.addRow(new Object[] {"Saldo final", String.format("$%,34.2f", finalBalance)});
                
                // Actualiza la tabla de transacciones 
                for(Transaction t : txn){
                     // Si el depósito es igual a cero
                     if(t.getDeposit() == 0){
                         // Añade en columnas la fecha, descripción, signo "-", el retiro y subtotal
                         modelTblTransactions.addRow(new Object[] {t.getTransactionDate(), t.getTransactionDescription(), String.format("%40s", "-"), 
                             String.format("$%,31.2f", t.getWithdrawal()), String.format("$%,31.2f", t.getSubtotal())});
                         
                     }
                     // Si el retiro es igual a cero
                     if(t.getWithdrawal() == 0){
                         // Añade en columnas la fecha, descripción, el depósito, el signo "-" y subtotal
                         modelTblTransactions.addRow(new Object[] {t.getTransactionDate(), t.getTransactionDescription(), String.format("$%,31.2f", 
                                 t.getDeposit()), String.format("%40s", "-"), String.format("$%,31.2f", t.getSubtotal())});
                         
                     }
                     
                 }
                 // Muestra el saldo final
                txfFinalBalance.setText( String.format("%,35.2f", finalBalance));
                
            }
            
        }catch(NullPointerException e){
            // Captura una excepción de tipo NullPointerException
            JOptionPane.showMessageDialog(null, "Por favor, selecciona un archivo JSON con un formato correcto.", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        }catch(Exception ex){
            // Captura cualquier otra excepción y muestra un mensaje de error
            JOptionPane.showMessageDialog(null,"¡Oops! Ha sucedido un error: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnSeleccioneActionPerformed

    private void cbxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMonthItemStateChanged

        try{
                // Obtiene los modelos de las tablas y limpia sus datos
                DefaultTableModel modelTblPeriodSummary = (DefaultTableModel) tblPeriodSummary.getModel();
                modelTblPeriodSummary.setRowCount(0);
                DefaultTableModel modelTblTransactions = (DefaultTableModel) tblTransactions.getModel();
                modelTblTransactions.setRowCount(0);
                
                // Variables para almacenar depósitos, retiros y saldo final
                float deposits = 0;
                float withdrawals = 0;
                float finalBalance = 0;
                
                // Obtiene el mes seleccionado en el JComboBox    
                month = cbxMonth.getSelectedItem().toString();
                
                // Obtiene la lista de transacciones para el mes seleccionado
                List<Transaction> mov = operation.getTransactions(month, account.getTransactions());
                
                // Obtiene el saldo inicial para el mes seleccionado
                float saldoAnterior = operation.getInitialBalance(month, account.getTransactions());
                
                // Calcula depósitos, retiros y saldo final
                for(Transaction m : mov){
                
                     deposits += m.getDeposit();
                     withdrawals += m.getWithdrawal();
                     finalBalance = m.getSubtotal();
                
                }
                 // Agrega filas a la tabla de resumen de periodo
                modelTblPeriodSummary.addRow(new Object[] {"Saldo inicial (anterior)", String.format("$%,34.2f", saldoAnterior)});
                modelTblPeriodSummary.addRow(new Object[] {"Depósitos", String.format("$%,34.2f", deposits)});
                modelTblPeriodSummary.addRow(new Object[] {"Retiros", String.format("$%,34.2f", withdrawals)});
                modelTblPeriodSummary.addRow(new Object[] {"Saldo final", String.format("$%,34.2f", finalBalance)});
                
                // Agrega filas a la tabla de transacciones
                for(Transaction m : mov){
                     
                      if(m.getDeposit() == 0){
                         
                         modelTblTransactions.addRow(new Object[] {m.getTransactionDate(), m.getTransactionDescription(), String.format("%40s", "-"), 
                             String.format("$%,31.2f", m.getWithdrawal()), String.format("$%,31.2f", m.getSubtotal())});
                         
                     }
                     
                     if(m.getWithdrawal() == 0){
                         
                        modelTblTransactions.addRow(new Object[] {m.getTransactionDate(), m.getTransactionDescription(), String.format("$%,31.2f", m.getDeposit()), 
                            String.format("%40s", "-"), String.format("$%,31.2f", m.getSubtotal())});
                         
                     }
                     
                 }
                // Actualiza el campo de texto con el saldo final 
                txfFinalBalance.setText(String.format("%,35.2f", finalBalance));
            
        }catch(Exception ex){
            // Muestra un mensaje de error en caso de excepción
            JOptionPane.showMessageDialog(null,"¡Oops! Ha sucedido un error: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_cbxMonthItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSeleccione;
    private javax.swing.JComboBox<String> cbxMonth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JTable tblAccount;
    private javax.swing.JTable tblCustomerInfo;
    private javax.swing.JTable tblPeriodSummary;
    private javax.swing.JTable tblTransactions;
    private javax.swing.JTextField txfCustomerName;
    private javax.swing.JTextField txfFile;
    private javax.swing.JTextField txfFinalBalance;
    private javax.swing.JTextField txtCustomerId;
    // End of variables declaration//GEN-END:variables
    
    
}
